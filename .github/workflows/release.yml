name: Publish NPM package

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Check the version
        id: check
        run: |
          CURRENT_VERSION=$(jq -r .version package.json)
          echo "Current version: $CURRENT_VERSION"
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          LATEST_VERSION=${LATEST_TAG#v}

          if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; 
          then
            echo "Version changed"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version not changed"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Build
        if: steps.check.outputs.version_changed == 'true'
        run: npm run build

      - name: Publish
        if: steps.check.outputs.version_changed == 'true'
        run: npm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Tag release
        if: steps.check.outputs.version_changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a "v${{ steps.check.outputs.new_version }}" -m "v${{ steps.check.outputs.new_version }}"
          git push origin "v${{ steps.check.outputs.new_version }}"

      - name: Update latest tag
        if: steps.check.outputs.version_changed == 'true'
        run: |
          git tag -f latest
          git push origin latest --force

      - name: Generate Changelog
        if: steps.check.outputs.version_changed == 'true'
        run: |
          changelog=$(git log ${LATEST_TAG}..HEAD --oneline --no-merges)
          echo "$changelog" > changelog.txt

      - name: Create GitHub Release
        if: steps.check.outputs.version_changed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: 'v${{ steps.check.outputs.new_version }}'
          release_name: 'Release v${{ steps.check.outputs.new_version }}'
          body: |
            ## Changelog:
            $(cat changelog.txt)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
